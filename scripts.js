const months = [
    "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
    "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
];

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
const monthlyInputs = document.getElementById('monthlyInputs');
months.forEach(month => {
    const label = document.createElement('label');
    label.textContent = `–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥ –∑–∞ ${month}:`;
    label.className = 'block text-lg font-semibold mb-2';
    monthlyInputs.appendChild(label);

    const input = document.createElement('input');
    input.type = 'text';
    input.id = month;
    input.placeholder = '–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥';
    input.className = 'w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:border-green-500 focus:ring focus:ring-green-200';
    input.addEventListener('input', formatInput);
    monthlyInputs.appendChild(input);
});

/* Game styles */
const style = document.createElement('style');
style.textContent = `
/* Game container styles */
.game-container {
    max-width: 550px;
    margin: 2rem auto;
    padding: 1.5rem;
    background: linear-gradient(135deg, #1a1a2e, #16213e);
    border-radius: 1.2rem;
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
}

/* Game header */
.game-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    gap: 1.5rem;
    flex-wrap: wrap;
    color: #e0e0e0;
}

/* Score box */
.score-box {
    background: #2a2a4a;
    border-radius: 0.8rem;
    padding: 0.8rem 1.8rem;
    border: 2px solid #4a4a8a;
    font-weight: 700;
    display: flex;
    align-items: center;
    gap: 0.6rem;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.score-box:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(74, 74, 138, 0.4);
}

.score-box span:first-child {
    color: #00ddeb;
    font-size: 1.1rem;
}

/* Game board */
.game-board {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 0.9rem;
    background: #0f0f23;
    border-radius: 1.2rem;
    padding: 1rem;
    border: 2px solid #4a4a8a;
    box-shadow: 0 12px 35px rgba(0, 0, 0, 0.25);
    position: relative;
}

/* Match-3 specific styles */
#match3-board {
    grid-template-columns: repeat(8, 1fr);
}

.match3-cell {
    aspect-ratio: 1;
    border-radius: 0.6rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.8rem;
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease, background 0.3s ease;
    position: relative;
    overflow: hidden;
    background: #2a2a4a;
    box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);
}

.match3-cell::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.2), transparent);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.match3-cell:hover::before {
    opacity: 1;
}

.match3-cell:hover {
    transform: scale(1.05);
    box-shadow: 0 5px 15px rgba(0, 221, 235, 0.4);
}

.match3-cell.selected {
    transform: scale(0.92);
    box-shadow: 0 0 0 4px #00ddeb, 0 5px 15px rgba(0, 221, 235, 0.5);
    z-index: 2;
}

.match3-cell.swap {
    animation: swap 0.3s ease;
}

.match3-cell.fall {
    animation: fall 0.4s ease forwards;
}

.match3-cell.pop {
    animation: pop 0.2s ease;
}

.match3-cell.new {
    animation: fadeIn 0.3s ease;
}

/* 2048 specific styles */
#2048-board {
    position: relative;
    background: #0f0f23;
    aspect-ratio: 1;
}

.tile {
    position: absolute;
    width: calc(25% - 0.9rem);
    height: calc(25% - 0.9rem);
    border-radius: 0.6rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.6rem;
    font-weight: 800;
    transition: transform 0.2s ease, top 0.2s ease, left 0.2s ease;
    z-index: 1;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

.tile.new {
    animation: appear 0.2s ease;
}

.tile.merged {
    animation: merge 0.2s ease;
}

.tile-2 { background: linear-gradient(135deg, #eee4da, #e8d9c5); color: #776e65; }
.tile-4 { background: linear-gradient(135deg, #ede0c8, #e7d6b0); color: #776e65; }
.tile-8 { background: linear-gradient(135deg, #f2b179, #eda767); color: #f9f6f2; }
.tile-16 { background: linear-gradient(135deg, #f59563, #f08950); color: #f9f6f2; }
.tile-32 { background: linear-gradient(135deg, #f67c5f, #f16e4c); color: #f9f6f2; }
.tile-64 { background: linear-gradient(135deg, #f65e3b, #f14e2a); color: #f9f6f2; }
.tile-128 { background: linear-gradient(135deg, #edcf72, #e8c560); color: #f9f6f2; font-size: 1.3rem; }
.tile-256 { background: linear-gradient(135deg, #edcc61, #e8c150); color: #f9f6f2; font-size: 1.3rem; }
.tile-512 { background: linear-gradient(135deg, #edc850, #e8c33e); color: #f9f6f2; font-size: 1.3rem; }
.tile-1024 { background: linear-gradient(135deg, #edc53f, #e8bf2e); color: #f9f6f2; font-size: 1.1rem; }
.tile-2048 { background: linear-gradient(135deg, #edc22e, #e8bc1d); color: #f9f6f2; font-size: 1.1rem; }

.tile:hover {
    transform: scale(1.03);
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.4);
}

.grid-cell {
    aspect-ratio: 1;
    border-radius: 0.6rem;
    background: rgba(238, 228, 218, 0.2);
    box-shadow: inset 0 0 8px rgba(0, 0, 0, 0.2);
}

/* Button styles */
.btn.btn-secondary {
    background: linear-gradient(135deg, #00ddeb, #0099a8);
    color: #fff;
    border: none;
    padding: 0.8rem 1.8rem;
    border-radius: 0.8rem;
    font-weight: 600;
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    align-items: center;
}

.btn.btn-secondary:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(0, 221, 235, 0.4);
}

.btn.btn-secondary:active {
    transform: translateY(0);
    box-shadow: 0 2px 8px rgba(0, 221, 235, 0.2);
}

/* Tab button styles */
.tab-button {
    background: #2a2a4a;
    color: #e0e0e0;
    transition: background 0.3s ease, transform 0.3s ease;
}

.tab-button:hover {
    background: #3a3a6a;
    transform: translateY(-2px);
}

.tab-button.active {
    background: linear-gradient(135deg, #00ddeb, #0099a8);
    color: #fff;
}

/* Animation keyframes */
@keyframes swap {
    0% { transform: translate(0, 0); }
    50% { transform: translateY(-10px); }
    100% { transform: translate(0, 0); }
}

@keyframes fall {
    0% { transform: translateY(-100%); opacity: 0; }
    100% { transform: translateY(0); opacity: 1; }
}

@keyframes pop {
    0% { transform: scale(1); }
    50% { transform: scale(1.2); }
    100% { transform: scale(0); }
}

@keyframes fadeIn {
    0% { opacity: 0; transform: scale(0.8); }
    100% { opacity: 1; transform: scale(1); }
}

@keyframes appear {
    0% { transform: scale(0); }
    100% { transform: scale(1); }
}

@keyframes merge {
    0% { transform: scale(1); }
    50% { transform: scale(1.2); }
    100% { transform: scale(1); }
}

/* Custom CSS variables */
:root {
    --dark-matter: #0f0f23;
    --event-horizon: #4a4a8a;
    --quantum: #00ddeb;
}
`;
document.head.appendChild(style);

// Match-3 Game
function initMatch3Game() {
    const board = document.getElementById('match3-board');
    const scoreElement = document.getElementById('match3-score');
    const restartButton = document.getElementById('match3-restart');
    
    let score = 0;
    let selectedCell = null;
    const gems = ['üíé', '‚ù§Ô∏è', 'üåÄ', 'üíµ', 'ü™ô', 'ü™¨'];
    
    function createBoard() {
        board.innerHTML = '';
        score = 0;
        scoreElement.textContent = '0';
        selectedCell = null;
        
        for (let i = 0; i < 64; i++) {
            const cell = document.createElement('div');
            cell.className = 'match3-cell new';
            cell.textContent = gems[Math.floor(Math.random() * gems.length)];
            cell.dataset.index = i;
            cell.addEventListener('click', handleCellClick);
            board.appendChild(cell);
            setTimeout(() => cell.classList.remove('new'), 300);
        }
    }
    
    function handleCellClick(e) {
        const cell = e.target;
        const cellIndex = parseInt(cell.dataset.index);
        
        if (selectedCell === null) {
            selectedCell = cellIndex;
            cell.classList.add('selected');
        } else if (selectedCell === cellIndex) {
            selectedCell = null;
            cell.classList.remove('selected');
        } else {
            const firstCell = board.children[selectedCell];
            const secondCell = cell;
            
            if (isAdjacent(selectedCell, cellIndex)) {
                firstCell.classList.add('swap');
                secondCell.classList.add('swap');
                
                const temp = firstCell.textContent;
                firstCell.textContent = secondCell.textContent;
                secondCell.textContent = temp;
                
                setTimeout(() => {
                    firstCell.classList.remove('swap');
                    secondCell.classList.remove('swap');
                    
                    const matches = checkMatches();
                    if (matches.length > 0) {
                        removeMatches(matches);
                        updateScore(matches.length * 10);
                    } else {
                        firstCell.classList.add('swap');
                        secondCell.classList.add('swap');
                        const temp = firstCell.textContent;
                        firstCell.textContent = secondCell.textContent;
                        secondCell.textContent = temp;
                        setTimeout(() => {
                            firstCell.classList.remove('swap');
                            secondCell.classList.remove('swap');
                        }, 300);
                    }
                    
                    firstCell.classList.remove('selected');
                    selectedCell = null;
                }, 300);
            } else {
                board.children[selectedCell].classList.remove('selected');
                selectedCell = cellIndex;
                cell.classList.add('selected');
            }
        }
    }
    
    function isAdjacent(index1, index2) {
        const row1 = Math.floor(index1 / 8);
        const col1 = index1 % 8;
        const row2 = Math.floor(index2 / 8);
        const col2 = index2 % 8;
        
        return (Math.abs(row1 - row2) === 1 && col1 === col2) || 
               (Math.abs(col1 - col2) === 1 && row1 === row2);
    }
    
    function checkMatches() {
        const matches = new Set();
        
        for (let row = 0; row < 8; row++) {
            for (let col = 0; col < 6; col++) {
                const index = row * 8 + col;
                const gem = board.children[index].textContent;
                
                if (board.children[index + 1].textContent === gem && 
                    board.children[index + 2].textContent === gem) {
                    matches.add(index);
                    matches.add(index + 1);
                    matches.add(index + 2);
                }
            }
        }
        
        for (let col = 0; col < 8; col++) {
            for (let row = 0; row < 6; row++) {
                const index = row * 8 + col;
                const gem = board.children[index].textContent;
                
                if (board.children[index + 8].textContent === gem && 
                    board.children[index + 16].textContent === gem) {
                    matches.add(index);
                    matches.add(index + 8);
                    matches.add(index + 16);
                }
            }
        }
        
        return Array.from(matches);
    }
    
    function removeMatches(matchIndexes) {
        matchIndexes.forEach(index => {
            const cell = board.children[index];
            cell.classList.add('pop');
            setTimeout(() => {
                cell.textContent = '';
                cell.classList.remove('pop');
            }, 200);
        });
        
        setTimeout(() => {
            for (let col = 0; col < 8; col++) {
                let emptySpaces = [];
                
                for (let row = 7; row >= 0; row--) {
                    const index = row * 8 + col;
                    if (board.children[index].textContent === '') {
                        emptySpaces.push(index);
                    } else if (emptySpaces.length > 0) {
                        const emptyIndex = emptySpaces.shift();
                        board.children[emptyIndex].classList.add('fall');
                        board.children[emptyIndex].textContent = board.children[index].textContent;
                        board.children[index].textContent = '';
                        emptySpaces.push(index);
                        setTimeout(() => board.children[emptyIndex].classList.remove('fall'), 400);
                    }
                }
                
                emptySpaces.forEach(index => {
                    const cell = board.children[index];
                    cell.classList.add('new');
                    cell.textContent = gems[Math.floor(Math.random() * gems.length)];
                    setTimeout(() => cell.classList.remove('new'), 300);
                });
            }
            
            setTimeout(() => {
                const newMatches = checkMatches();
                if (newMatches.length > 0) {
                    removeMatches(newMatches);
                    updateScore(newMatches.length * 10);
                }
            }, 400);
        }, 300);
    }
    
    function updateScore(points) {
        score += points;
        scoreElement.textContent = score;
    }
    
    restartButton.addEventListener('click', createBoard);
    createBoard();
}

// 2048 Game
function init2048Game() {
    const board = document.getElementById('2048-board');
    const scoreElement = document.getElementById('2048-score');
    const bestScoreElement = document.getElementById('2048-best');
    const restartButton = document.getElementById('2048-restart');
    
    let grid = [];
    let score = 0;
    let bestScore = localStorage.getItem('2048-best') || 0;
    bestScoreElement.textContent = bestScore;
    
    function createBoard() {
        board.innerHTML = '';
        grid = Array(4).fill().map(() => Array(4).fill(0));
        score = 0;
        scoreElement.textContent = '0';
        
        for (let row = 0; row < 4; row++) {
            for (let col = 0; col < 4; col++) {
                const cell = document.createElement('div');
                cell.className = 'grid-cell';
                cell.dataset.row = row;
                cell.dataset.col = col;
                board.appendChild(cell);
            }
        }
        
        addRandomTile();
        addRandomTile();
        updateView();
    }
    
    function addRandomTile() {
        const emptyCells = [];
        
        for (let row = 0; row < 4; row++) {
            for (let col = 0; col < 4; col++) {
                if (grid[row][col] === 0) {
                    emptyCells.push({ row, col });
                }
            }
        }
        
        if (emptyCells.length > 0) {
            const { row, col } = emptyCells[Math.floor(Math.random() * emptyCells.length)];
            grid[row][col] = Math.random() < 0.9 ? 2 : 4;
        }
    }
    
    function updateView() {
        document.querySelectorAll('.tile').forEach(tile => tile.remove());
        
        for (let row = 0; row < 4; row++) {
            for (let col = 0; col < 4; col++) {
                if (grid[row][col] !== 0) {
                    const tile = document.createElement('div');
                    tile.className = `tile tile-${grid[row][col]}`;
                    tile.textContent = grid[row][col];
                    tile.style.top = `calc(${row * 25}% + 0.45rem)`;
                    tile.style.left = `calc(${col * 25}% + 0.45rem)`;
                    tile.dataset.row = row;
                    tile.dataset.col = col;
                    board.appendChild(tile);
                }
            }
        }
    }
    
    function moveTiles(direction) {
        let moved = false;
        const newGrid = JSON.parse(JSON.stringify(grid));
        const merges = [];
        
        if (direction === 'right') {
            for (let row = 0; row < 4; row++) {
                newGrid[row] = newGrid[row].reverse();
            }
        } else if (direction === 'up') {
            for (let row = 0; row < 4; row++) {
                for (let col = row + 1; col < 4; col++) {
                    [newGrid[row][col], newGrid[col][row]] = [newGrid[col][row], newGrid[row][col]];
                }
            }
        } else if (direction === 'down') {
            for (let row = 0; row < 4; row++) {
                for (let col = row + 1; col < 4; col++) {
                    [newGrid[row][col], newGrid[col][row]] = [newGrid[col][row], newGrid[row][col]];
                }
            }
            for (let row = 0; row < 4; row++) {
                newGrid[row] = newGrid[row].reverse();
            }
        }
        
        for (let row = 0; row < 4; row++) {
            let nums = newGrid[row].filter(num => num !== 0);
            
            for (let i = 0; i < nums.length - 1; i++) {
                if (nums[i] === nums[i + 1]) {
                    nums[i] *= 2;
                    merges.push({ row, col: i });
                    nums[i + 1] = 0;
                    score += nums[i];
                    moved = true;
                }
            }
            
            nums = nums.filter(num => num !== 0);
            
            while (nums.length < 4) {
                nums.push(0);
            }
            
            if (newGrid[row].toString() !== nums.toString()) {
                moved = true;
            }
            
            newGrid[row] = nums;
        }
        
        if (direction === 'right') {
            for (let row = 0; row < 4; row++) {
                newGrid[row] = newGrid[row].reverse();
            }
        } else if (direction === 'up') {
            for (let row = 0; row < 4; row++) {
                for (let col = row + 1; col < 4; col++) {
                    [newGrid[row][col], newGrid[col][row]] = [newGrid[col][row], newGrid[row][col]];
                }
            }
        } else if (direction === 'down') {
            for (let row = 0; row < 4; row++) {
                newGrid[row] = newGrid[row].reverse();
            }
            for (let row = 0; row < 4; row++) {
                for (let col = row + 1; col < 4; col++) {
                    [newGrid[row][col], newGrid[col][row]] = [newGrid[col][row], newGrid[row][col]];
                }
            }
        }
        
        if (moved) {
            grid = newGrid;
            addRandomTile();
            updateView();
            
            document.querySelectorAll('.tile').forEach(tile => {
                const row = parseInt(tile.dataset.row);
                const col = parseInt(tile.dataset.col);
                tile.classList.add('new');
                setTimeout(() => tile.classList.remove('new'), 200);
                
                merges.forEach(merge => {
                    if (merge.row === row && merge.col === col) {
                        tile.classList.add('merged');
                        setTimeout(() => tile.classList.remove('merged'), 200);
                    }
                });
            });
            
            scoreElement.textContent = score;
            
            if (score > bestScore) {
                bestScore = score;
                bestScoreElement.textContent = bestScore;
                localStorage.setItem('2048-best', bestScore);
            }
            
            checkGameOver();
        }
    }
    
    function checkGameOver() {
        for (let row = 0; row < 4; row++) {
            for (let col = 0; col < 4; col++) {
                if (grid[row][col] === 0) {
                    return false;
                }
            }
        }
        
        for (let row = 0; row < 4; row++) {
            for (let col = 0; col < 4; col++) {
                if (col < 3 && grid[row][col] === grid[row][col + 1]) {
                    return false;
                }
                if (row < 3 && grid[row][col] === grid[row + 1][col]) {
                    return false;
                }
            }
        }
        
        setTimeout(() => {
            alert(`–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à —Å—á—ë—Ç: ${score}`);
        }, 100);
        
        return true;
    }
    
    document.addEventListener('keydown', (e) => {
        if (!board.querySelector('.tile')) return;
        
        if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.code)) {
            e.preventDefault();
            
            switch (e.code) {
                case 'ArrowUp': moveTiles('up'); break;
                case 'ArrowDown': moveTiles('down'); break;
                case 'ArrowLeft': moveTiles('left'); break;
                case 'ArrowRight': moveTiles('right'); break;
            }
        }
    });
    
    let touchStartX = 0;
    let touchStartY = 0;
    
    board.addEventListener('touchstart', (e) => {
        touchStartX = e.touches[0].clientX;
        touchStartY = e.touches[0].clientY;
    }, false);
    
    board.addEventListener('touchend', (e) => {
        if (!touchStartX || !touchStartY) return;
        
        const touchEndX = e.changedTouches[0].clientX;
        const touchEndY = e.changedTouches[0].clientY;
        const dx = touchEndX - touchStartX;
        const dy = touchEndY - touchStartY;
        
        if (Math.abs(dx) > Math.abs(dy)) {
            if (dx > 0) moveTiles('right');
            else moveTiles('left');
        } else {
            if (dy > 0) moveTiles('down');
            else moveTiles('up');
        }
        
        touchStartX = 0;
        touchStartY = 0;
    }, false);
    
    restartButton.addEventListener('click', createBoard);
    createBoard();
}

// Tab navigation
document.addEventListener('DOMContentLoaded', () => {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            tabButtons.forEach(btn => btn.classList.remove('active'));
            tabContents.forEach(content => content.classList.add('hidden'));
            
            button.classList.add('active');
            const tabId = button.dataset.tab;
            document.getElementById(tabId).classList.remove('hidden');
            
            if (tabId === 'match3' && !document.querySelector('.match3-cell')) {
                initMatch3Game();
            } else if (tabId === 'game2048' && !document.querySelector('.tile')) {
                init2048Game();
            }
        });
    });
    
    // Initialize first tab
    if (tabButtons.length > 0) {
        tabButtons[0].click();
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å —Ç–æ—á–∫–∞–º–∏
function formatInput(event) {
    const input = event.target;
    let value = input.value.replace(/\./g, '');
    value = value.replace(/\D/g, '');
    if (value.length > 3) {
        value = value.replace(/\B(?=(\d{3})+(?!\d))/g, '.');
    }
    input.value = value;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞
function formatNumber(value) {
    return value ? parseFloat(value).toLocaleString('ru-RU').replace(/,/g, '.') : '0';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cleanNumber(value) {
    return value.replace(/\./g, '');
}

// –†–∞—Å—á–µ—Ç –ù–î–°
function calculateVAT() {
    const currentYearIncome = parseFloat(cleanNumber(document.getElementById('currentYearIncome').value)) || 0;
    let cumulativeIncome = 0;
    let totalVAT = 0;
    let vatRate = 0.0;

    const tableBody = document.querySelector('#resultsTable tbody');
    tableBody.innerHTML = '';

    const results = [];

    months.forEach(month => {
        const monthlyIncome = parseFloat(cleanNumber(document.getElementById(month).value)) || 0;
        cumulativeIncome += monthlyIncome;

        if (cumulativeIncome > 250000000) {
            vatRate = 0.07;
        } else if (cumulativeIncome > 60000000 && vatRate === 0) {
            vatRate = 0.05;
        }

        const vatAmount = cumulativeIncome > 60000000 ? monthlyIncome * vatRate : 0;
        totalVAT += vatAmount;

        const row = document.createElement('tr');
        row.innerHTML = `
            <td class="p-3">${month}</td>
            <td class="p-3">${formatNumber(monthlyIncome)}</td>
            <td class="p-3">${formatNumber(cumulativeIncome)}</td>
            <td class="p-3">${vatRate > 0 ? `${(vatRate * 100).toFixed(2)}%` : '–±–µ–∑ –Ω–∞–ª–æ–≥–∞'}</td>
            <td class="p-3">${formatNumber(vatAmount.toFixed(2))}</td>
        `;
        tableBody.appendChild(row);

        results.push([
            month,
            monthlyIncome,
            cumulativeIncome,
            vatRate > 0 ? (vatRate * 100).toFixed(2) : 0,
            vatAmount.toFixed(2)
        ]);
    });

    document.getElementById('totalLabel').textContent = `–ò—Ç–æ–≥–æ: ${formatNumber(cumulativeIncome)} ‚ÇΩ, –°—É–º–º–∞ –ù–î–°: ${formatNumber(totalVAT.toFixed(2))} ‚ÇΩ`;

    localStorage.setItem('vatResults', JSON.stringify(results));
    alert('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.');
}

// –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
function clearTable() {
    document.querySelector('#resultsTable tbody').innerHTML = '';
    document.getElementById('totalLabel').textContent = '–ò—Ç–æ–≥–æ: 0 ‚ÇΩ, –°—É–º–º–∞ –ù–î–°: 0 ‚ÇΩ';
    months.forEach(month => document.getElementById(month).value = '');
    document.getElementById('currentYearIncome').value = '';
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
function saveToExcel() {
    const results = JSON.parse(localStorage.getItem('vatResults')) || [];
    if (results.length === 0) {
        alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
        return;
    }

    const excelData = [
        ["–º–µ—Å—è—Ü", "–î–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü–µ", "–î–æ—Ö–æ–¥ –Ω–∞—Ä–∞—Å—Ç–∞—é—â–∏–º –∏—Ç–æ–≥–æ–º", "–°—Ç–∞–≤–∫–∞ –ù–î–°", "–°—É–º–º–∞ –ù–î–°"]
    ];

    let cumulativeIncome = 0;
    let totalVAT = 0;

    results.forEach((row) => {
        const month = row[0];
        const monthlyIncome = parseFloat(cleanNumber(row[1].toString())) || 0;
        cumulativeIncome += monthlyIncome;

        let vatRate = 0;
        if (cumulativeIncome > 250000000) {
            vatRate = 7;
        } else if (cumulativeIncome > 60000000) {
            vatRate = 5;
        }

        const vatAmount = cumulativeIncome > 60000000 ? monthlyIncome * (vatRate / 100) : 0;
        totalVAT += vatAmount;

        excelData.push([month, monthlyIncome, cumulativeIncome, vatRate / 100, vatAmount.toFixed(2)]);
    });

    excelData.push(["", "", "", "–ù–î–°", totalVAT.toFixed(2)]);
    excelData.push(["", "", "", "–£–°–ù", ((cumulativeIncome - totalVAT) * 0.06).toFixed(2)]);
    excelData.push(["", "", "", "–ò—Ç–æ–≥–æ –Ω–∞–ª–æ–≥–∏", (totalVAT + (cumulativeIncome - totalVAT) * 0.06).toFixed(2)]);

    const workbook = XLSX.utils.book_new();
    const worksheet = XLSX.utils.aoa_to_sheet(excelData);

    const range = XLSX.utils.decode_range(worksheet['!ref']);
    for (let R = range.s.r + 1; R <= range.e.r; ++R) {
        const cellAddress = XLSX.utils.encode_cell({ r: R, c: 3 });
        if (worksheet[cellAddress]) {
            worksheet[cellAddress].z = '0%';
        }
    }

    XLSX.utils.book_append_sheet(workbook, worksheet, "–†–∞—Å—á–µ—Ç –ù–î–°");
    XLSX.writeFile(workbook, "vat_results.xlsx");
}

// –ò–º–ø–æ—Ä—Ç –∏–∑ Excel
function importFromExcel() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.xlsx';
    input.onchange = (e) => {
        const file = e.target.files[0];
        const reader = new FileReader();
        reader.onload = (event) => {
            const data = new Uint8Array(event.target.result);
            const workbook = XLSX.read(data, { type: 'array' });
            const sheet = workbook.Sheets[workbook.SheetNames[0]];
            const json = XLSX.utils.sheet_to_json(sheet);
            json.forEach((row, index) => {
                if (index < months.length) {
                    const month = months[index];
                    document.getElementById(month).value = formatNumber(row['–î–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü–µ'] || 0);
                }
            });
            calculateVAT();
        };
        reader.readAsArrayBuffer(file);
    };
    input.click();
}

// –ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–î–°
function calculateSimpleVAT() {
    const direction = document.getElementById('vatDirection').value;
    const amount = parseFloat(cleanNumber(document.getElementById('vatAmount').value)) || 0;
    const rate = parseFloat(document.getElementById('vatRate').value) / 100;
    let result;
    if (direction === 'add') {
        const vat = amount * rate;
        const total = amount + vat;
        result = `
            –°—É–º–º–∞ –±–µ–∑ –ù–î–°: ${formatNumber(amount)} ‚ÇΩ<br>
            –ù–î–° (${rate * 100}%): ${formatNumber(vat)} ‚ÇΩ<br>
            –°—É–º–º–∞ —Å –ù–î–°: ${formatNumber(total)} ‚ÇΩ<br>
            –ö–ë–ö: 182 1 03 01000 01 1000 110
        `;
    } else {
        const total = amount;
        const base = amount / (1 + rate);
        const vat = amount - base;
        result = `
            –°—É–º–º–∞ —Å –ù–î–°: ${formatNumber(total)} ‚ÇΩ<br>
            –ù–î–° (${rate * 100}%): ${formatNumber(vat)} ‚ÇΩ<br>
            –°—É–º–º–∞ –±–µ–∑ –ù–î–°: ${formatNumber(base)} ‚ÇΩ<br>
            –ö–ë–ö: 182 1 03 01000 01 1000 110
        `;
    }
    document.getElementById('vatResult').innerHTML = result;
}

// –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –≤–∑–Ω–æ—Å–æ–≤
function calculateInsurance() {
    const type = document.getElementById('insuranceType').value;
    const amount = parseFloat(cleanNumber(document.getElementById('insuranceAmount').value)) || 0;
    const limit = 2759000; // –õ–∏–º–∏—Ç –¥–ª—è –ü–§–† –Ω–∞ 2025
    let pfrRate = type === 'standard' ? 0.22 : 0.06;
    let fssRate = type === 'standard' ? 0.029 : 0.015;
    let ffomsRate = type === 'standard' ? 0.051 : 0.001;
    let pfr = Math.min(amount, limit) * pfrRate;
    let fss = amount * fssRate;
    let ffoms = amount * ffomsRate;
    if (amount > limit) {
        pfr += (amount - limit) * 0.1; // 10% —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞
    }
    const total = pfr + fss + ffoms;
    document.getElementById('insuranceResult').innerHTML = `
        –ü–§–†: ${formatNumber(pfr.toFixed(2))} ‚ÇΩ (–ö–ë–ö: 182 1 02 15010 06 1000 160)<br>
        –§–°–°: ${formatNumber(fss.toFixed(2))} ‚ÇΩ (–ö–ë–ö: 182 1 02 15020 06 1000 160)<br>
        –§–§–û–ú–°: ${formatNumber(ffoms.toFixed(2))} ‚ÇΩ (–ö–ë–ö: 182 1 02 15030 08 1000 160)<br>
        –ò—Ç–æ–≥–æ: ${formatNumber(total.toFixed(2))} ‚ÇΩ
    `;
}

// –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ù–î–§–õ
function calculateNDFL() {
    const salary = parseFloat(cleanNumber(document.getElementById('salaryAmount').value)) || 0;
    const children = parseInt(document.getElementById('childrenCount').value) || 0;
    const otherDeductions = parseFloat(cleanNumber(document.getElementById('otherDeductions').value)) || 0;
    let deductions = otherDeductions;
    for (let i = 0; i < children; i++) {
        deductions += i < 1 ? 1400 : i < 2 ? 2800 : 6000;
    }
    const taxable = Math.max(0, salary - deductions);
    let tax = 0;
    if (taxable <= 2400000) {
        tax = taxable * 0.13;
    } else if (taxable <= 5000000) {
        tax = 2400000 * 0.13 + (taxable - 2400000) * 0.15;
    } else if (taxable <= 20000000) {
        tax = 2400000 * 0.13 + 2600000 * 0.15 + (taxable - 5000000) * 0.18;
    } else if (taxable <= 50000000) {
        tax = 2400000 * 0.13 + 2600000 * 0.15 + 15000000 * 0.18 + (taxable - 20000000) * 0.20;
    } else {
        tax = 2400000 * 0.13 + 2600000 * 0.15 + 15000000 * 0.18 + 30000000 * 0.20 + (taxable - 50000000) * 0.22;
    }
    const kbk = taxable <= 2400000 ? '182 1 01 02010 01 1000 110' :
                taxable <= 5000000 ? '182 1 01 02080 01 1000 110' :
                taxable <= 20000000 ? '182 1 01 02150 01 1000 110' :
                taxable <= 50000000 ? '182 1 01 02160 01 1000 110' : '182 1 01 02170 01 1000 110';
    document.getElementById('ndflResult').innerHTML = `
        –ù–∞–ª–æ–≥–æ–æ–±–ª–∞–≥–∞–µ–º–∞—è –±–∞–∑–∞: ${formatNumber(taxable)} ‚ÇΩ<br>
        –ù–î–§–õ: ${formatNumber(tax.toFixed(2))} ‚ÇΩ<br>
        –ö–ë–ö: ${kbk}
    `;
}

// –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–∏
function calculateAmortization() {
    const cost = parseFloat(cleanNumber(document.getElementById('assetCost').value)) || 0;
    const spi = parseInt(document.getElementById('assetSPI').value) || 12;
    const method = document.getElementById('amortMethod').value;
    const group = parseInt(document.getElementById('amortGroup').value) || 1;
    let result;
    if (method === 'linear') {
        const monthly = cost / spi;
        result = `–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è: ${formatNumber(monthly.toFixed(2))} ‚ÇΩ`;
    } else {
        const rates = { 1: 0.143, 2: 0.088, 3: 0.056 };
        let balance = cost;
        let monthly = balance * rates[group];
        result = `–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è (1-–π –º–µ—Å—è—Ü): ${formatNumber(monthly.toFixed(2))} ‚ÇΩ<br>–û—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${formatNumber((balance - monthly).toFixed(2))} ‚ÇΩ`;
    }
    document.getElementById('amortResult').innerHTML = result;
}

// –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç
const popularCurrencies = ['USD', 'EUR', 'CNY', 'GBP', 'JPY', 'CHF', 'KZT', 'UAH', 'BYN'];

// –ó–∞–ø–æ–ª–Ω—è–µ–º select-—ã –≤–∞–ª—é—Ç–∞–º–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function initCurrencySelects() {
    const fromSelect = document.getElementById('fromCurrency');
    const toSelect = document.getElementById('toCurrency');
    
    // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º RUB –ø–µ—Ä–≤—ã–º
    fromSelect.innerHTML = '<option value="RUB">RUB</option>';
    toSelect.innerHTML = '<option value="RUB">RUB</option>';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã
    popularCurrencies.forEach(currency => {
        fromSelect.innerHTML += `<option value="${currency}">${currency}</option>`;
        toSelect.innerHTML += `<option value="${currency}">${currency}</option>`;
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    fromSelect.value = 'RUB';
    toSelect.value = 'USD';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
function formatNumber(value) {
    return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
function cleanNumber(value) {
    return value.replace(/\D/g, '');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
let currentRates = {
    'RUB': { value: 1, nominal: 1, name: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å' }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç
async function convertCurrency() {
    const amount = parseFloat(cleanNumber(document.getElementById('currencyAmount').value)) || 0;
    const from = document.getElementById('fromCurrency').value;
    const to = document.getElementById('toCurrency').value;
    let date = document.getElementById('currencyDate').value;

    if (!amount) {
        showCurrencyError('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
        return;
    }

    if (!date) {
        const today = new Date();
        date = today.toISOString().split('T')[0];
        document.getElementById('currencyDate').value = date;
    }

    try {
        document.getElementById('currencyResult').innerHTML = `
            <div class="text-center py-4">
                <i class="fas fa-spinner fa-spin text-blue-500 text-2xl"></i>
                <p class="mt-2">–ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã...</p>
            </div>
        `;

        await fetchCurrencyRates(date);

        if (!currentRates[from] && from !== 'RUB') {
            throw new Error(`–í–∞–ª—é—Ç–∞ "${from}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
        if (!currentRates[to] && to !== 'RUB') {
            throw new Error(`–í–∞–ª—é—Ç–∞ "${to}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }

        let result;
        if (from === 'RUB') {
            const toRate = currentRates[to].value / currentRates[to].nominal;
            result = amount / toRate;
        } else if (to === 'RUB') {
            const fromRate = currentRates[from].value / currentRates[from].nominal;
            result = amount * fromRate;
        } else {
            const fromRate = currentRates[from].value / currentRates[from].nominal;
            const toRate = currentRates[to].value / currentRates[to].nominal;
            result = (amount * fromRate) / toRate;
        }

        showCurrencyResult(amount, from, result, to, date);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
        showCurrencyError(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
async function fetchCurrencyRates(date) {
    const [year, month, day] = date.split('-');
    const cbrDate = `${day}/${month}/${year}`;
    
    try {
        // –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS-–ø—Ä–æ–∫—Å–∏
        const proxyUrl = 'https://api.allorigins.win/raw?url=';
        const apiUrl = `https://www.cbr.ru/scripts/XML_daily.asp?date_req=${cbrDate}`;
        
        const response = await fetch(proxyUrl + encodeURIComponent(apiUrl));
        
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏');
        }

        const xmlText = await response.text();
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(xmlText, "text/xml");
        
        if (xmlDoc.getElementsByTagName("Valute").length === 0) {
            throw new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç');
        }

        currentRates = { 'RUB': { value: 1, nominal: 1, name: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å' } };

        for (let valute of xmlDoc.getElementsByTagName("Valute")) {
            const charCode = valute.getElementsByTagName("CharCode")[0].textContent;
            const value = parseFloat(valute.getElementsByTagName("Value")[0].textContent.replace(',', '.'));
            const nominal = parseInt(valute.getElementsByTagName("Nominal")[0].textContent);
            const name = valute.getElementsByTagName("Name")[0].textContent;
            
            currentRates[charCode] = { 
                value, 
                nominal, 
                name: name || charCode
            };    
        }

        updateRatesInfo(date);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤:', error);
        // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        await fetchAlternativeRates();
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
async function fetchAlternativeRates() {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        const fixedRates = {
            'USD': { value: 78.50, nominal: 1, name: '–î–æ–ª–ª–∞—Ä –°–®–ê' },
            'EUR': { value: 90.14, nominal: 1, name: '–ï–≤—Ä–æ' },
            'GBP': { value: 105.40, nominal: 1, name: '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤' },
            'CNY': { value: 10.90, nominal: 1, name: '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å' },
            'JPY': { value: 0.54, nominal: 100, name: '–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞' }
        };

        currentRates = { 'RUB': { value: 1, nominal: 1, name: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å' } };
        
        for (const [currency, rate] of Object.entries(fixedRates)) {
            currentRates[currency] = rate;
        }

        updateRatesInfo(new Date().toISOString().split('T')[0]);
        document.getElementById('ratesInfo').innerHTML += '<br><span class="text-yellow-600">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã</span>';

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–∞—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
function updateRatesInfo(date) {
    const usdRate = currentRates['USD'] ? (currentRates['USD'].value / currentRates['USD'].nominal).toFixed(4) : 'N/A';
    const eurRate = currentRates['EUR'] ? (currentRates['EUR'].value / currentRates['EUR'].nominal).toFixed(4) : 'N/A';
    
    document.getElementById('ratesInfo').innerHTML = `
        –ö—É—Ä—Å—ã –Ω–∞ ${date.split('-').reverse().join('.')}: 
        USD = ${usdRate} RUB, 
        EUR = ${eurRate} RUB
    `;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
function showCurrencyResult(amount, from, result, to, date) {
    const fromCurrency = currentRates[from]?.name || from;
    const toCurrency = currentRates[to]?.name || to;
    
    const resultDiv = document.createElement('div');
    resultDiv.className = 'bg-green-50 dark:bg-green-900/30 p-4 rounded-lg';
    
    const amountDiv = document.createElement('div');
    amountDiv.className = 'text-center text-2xl font-bold mb-2';
    amountDiv.textContent = `${formatNumber(amount.toFixed(2))} ${from} = ${formatNumber(result.toFixed(2))} ${to}`;
    resultDiv.appendChild(amountDiv);
    
    // –ö—É—Ä—Å "–∏–∑ –≤–∞–ª—é—Ç—ã"
    const fromRateDiv = document.createElement('div');
    fromRateDiv.className = 'bg-white dark:bg-gray-700 p-2 rounded';
    fromRateDiv.innerHTML = `
      <div class="font-semibold">1 ${from}</div>
      <div>= ${(from === 'RUB' 
        ? (1 / (currentRates[to]?.value / currentRates[to]?.nominal || 1)).toFixed(6) 
        : (currentRates[from]?.value / currentRates[from]?.nominal).toFixed(6)
      )} ${to === 'RUB' ? 'RUB' : to}</div>
    `;
    
    // –ö—É—Ä—Å "–≤ –≤–∞–ª—é—Ç—É"
    const toRateDiv = document.createElement('div');
    toRateDiv.className = 'bg-white dark:bg-gray-700 p-2 rounded';
    toRateDiv.innerHTML = `
      <div class="font-semibold">1 ${to}</div>
      <div>= ${(to === 'RUB' 
        ? (1 / (currentRates[from]?.value / currentRates[from]?.nominal || 1)).toFixed(6) 
        : (currentRates[to]?.value / currentRates[to]?.nominal).toFixed(6)
      )} ${from === 'RUB' ? 'RUB' : from}</div>
    `;
    
    const ratesContainer = document.createElement('div');
    ratesContainer.className = 'grid grid-cols-2 gap-4 mt-4 text-sm';
    ratesContainer.appendChild(fromRateDiv);
    ratesContainer.appendChild(toRateDiv);
    resultDiv.appendChild(ratesContainer);
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–∞—Ö
    const infoDiv = document.createElement('div');
    infoDiv.className = 'mt-4 text-xs text-gray-500 dark:text-gray-400';
    resultDiv.appendChild(infoDiv);
    
    // –û—á–∏—â–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const resultContainer = document.getElementById('currencyResult');
    resultContainer.innerHTML = '';
    resultContainer.appendChild(resultDiv);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
function showCurrencyError(message) {
    document.getElementById('currencyResult').innerHTML = `
        <div class="bg-red-50 dark:bg-red-900/30 p-4 rounded-lg">
            <div class="flex items-center text-red-600 dark:text-red-400">
                <i class="fas fa-exclamation-circle mr-2"></i>
                <span>${message}</span>
            </div>
            <div class="mt-2 text-sm">
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.
            </div>
        </div>
    `;
}

// –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
async function updateCurrencyRates() {
    const date = document.getElementById('currencyDate').value || new Date().toISOString().split('T')[0];
    try {
        document.getElementById('ratesInfo').innerHTML = `
            <i class="fas fa-spinner fa-spin text-blue-500"></i> –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤...
        `;
        await fetchCurrencyRates(date);
    } catch (error) {
        document.getElementById('ratesInfo').innerHTML = `
            <span class="text-red-500"><i class="fas fa-exclamation-circle"></i> –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤</span>
        `;
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
function formatNumber(value) {
    return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ');
}

// –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞
function cleanNumber(value) {
    return value.replace(/\s/g, '').replace(',', '.');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('currencyDate').value = today;
    updateCurrencyRates();
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ù–ù —á–µ—Ä–µ–∑ API –§–ù–°
async function checkContractor() {
    const inn = document.getElementById('innInput').value.replace(/\D/g, '');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù
    if (!inn || (inn.length !== 10 && inn.length !== 12)) {
        document.getElementById('contractorResult').innerHTML = '–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä';
        return;
    }

    document.getElementById('contractorResult').innerHTML = '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...';

    try {
        const response = await fetch(`https://egrul.itsoft.ru/${inn}.json`);
        
        if (!response.ok) {
            throw new Error('–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        const data = await response.json();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ü (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π)
        if (data['–°–≤–ò–ü']) {
            displayIndividualEntrepreneur(data['–°–≤–ò–ü']);
        } 
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü
        else if (data['–°–≤–Æ–õ']) {
            displayLegalEntity(data['–°–≤–Æ–õ']);
        } 
        // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
        else {
            throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
        }
        
    } catch (error) {
        document.getElementById('contractorResult').innerHTML = `
            <div class="bg-red-100 dark:bg-red-900 p-4 rounded-lg">
                <p>–û—à–∏–±–∫–∞: ${error.message}</p>
                <p class="mt-2">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é:</p>
                <a href="https://egrul.nalog.ru" 
                   target="_blank" 
                   class="text-blue-500 underline">
                    –°–∞–π—Ç –§–ù–°
                </a>
            </div>
        `;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ò–ü
function displayIndividualEntrepreneur(data) {
    const ip = data['@attributes'];
    const person = data['–°–≤–§–õ']?.['@attributes'] || {};
    const name = data['–°–≤–§–õ']?.['–§–ò–û–†—É—Å']?.['@attributes'] || {};
    const address = data['–°–≤–†–µ–≥–û—Ä–≥']?.['@attributes'] || {};
    const status = data['–°–≤–ü—Ä–µ–∫—Ä–∞—â']?.['–°–≤–°—Ç–∞—Ç—É—Å']?.['@attributes'] || {};
    const activities = data['–°–≤–û–ö–í–≠–î'] || {};
    const taxOffice = data['–°–≤–£—á–µ—Ç–ù–û']?.['–°–≤–ù–û']?.['@attributes'] || {};
    const email = data['–°–≤–ê–¥—Ä–≠–ª–ü–æ—á—Ç—ã']?.['@attributes'] || {};
    
    let resultHtml = `
        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
            <h2 class="text-2xl font-bold mb-4 text-green-600 dark:text-green-400">
                –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å
            </h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div>
                    <h3 class="font-semibold text-lg mb-2">–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
                    <p><strong>–§–ò–û:</strong> ${name['–§–∞–º–∏–ª–∏—è'] || '-'} ${name['–ò–º—è'] || '-'} ${name['–û—Ç—á–µ—Å—Ç–≤–æ'] || '-'}</p>
                    <p><strong>–ò–ù–ù:</strong> ${ip['–ò–ù–ù–§–õ'] || '-'}</p>
                    <p><strong>–û–ì–†–ù–ò–ü:</strong> ${ip['–û–ì–†–ù–ò–ü'] || '-'}</p>
                    <p><strong>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</strong> ${formatDate(ip['–î–∞—Ç–∞–û–ì–†–ù–ò–ü'])}</p>
                    <p><strong>–ü–æ–ª:</strong> ${person['–ü–æ–ª'] === '1' ? '–ú—É–∂—Å–∫–æ–π' : person['–ü–æ–ª'] === '2' ? '–ñ–µ–Ω—Å–∫–∏–π' : '-'}</p>
                </div>
                
                <div>
                    <h3 class="font-semibold text-lg mb-2">–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
                    <p><strong>Email:</strong> ${email['E-mail'] || '-'}</p>
                    <p><strong>–ù–∞–ª–æ–≥–æ–≤—ã–π –æ—Ä–≥–∞–Ω:</strong> ${taxOffice['–ù–∞–∏–º–ù–û'] || '-'}</p>
                    <p><strong>–ö–æ–¥ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ—Ä–≥–∞–Ω–∞:</strong> ${taxOffice['–ö–æ–¥–ù–û'] || '-'}</p>
                </div>
            </div>
            
            <div class="mb-6">
                <h3 class="font-semibold text-lg mb-2">–ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h3>
                <p>${address['–ê–¥—Ä–†–û'] ? address['–ê–¥—Ä–†–û'].replace(/,/g, ', ') : '-'}</p>
            </div>
            
            <div class="mb-6">
                <h3 class="font-semibold text-lg mb-2">–°—Ç–∞—Ç—É—Å</h3>
                <p class="${status['–ö–æ–¥–°—Ç–∞—Ç—É—Å'] ? 'text-red-600 dark:text-red-400' : 'text-green-600 dark:text-green-400'}">
                    ${status['–ù–∞–∏–º–°—Ç–∞—Ç—É—Å'] || '–î–µ–π—Å—Ç–≤—É—é—â–∏–π –ò–ü'}
                </p>
                ${status['–î–∞—Ç–∞–ü—Ä–µ–∫—Ä–∞—â'] ? `<p><strong>–î–∞—Ç–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è:</strong> ${formatDate(status['–î–∞—Ç–∞–ü—Ä–µ–∫—Ä–∞—â'])}</p>` : ''}
            </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –û–ö–í–≠–î
    if (activities['–°–≤–û–ö–í–≠–î–û—Å–Ω']) {
        resultHtml += `
            <div class="mb-6">
                <h3 class="font-semibold text-lg mb-2">–û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h3>
                <p><strong>${activities['–°–≤–û–ö–í–≠–î–û—Å–Ω']['@attributes']['–ö–æ–¥–û–ö–í–≠–î'] || '-'}:</strong> 
                   ${activities['–°–≤–û–ö–í–≠–î–û—Å–Ω']['@attributes']['–ù–∞–∏–º–û–ö–í–≠–î'] || '-'}</p>
            </div>
        `;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (activities['–°–≤–û–ö–í–≠–î–î–æ–ø'] && activities['–°–≤–û–ö–í–≠–î–î–æ–ø'].length > 0) {
        resultHtml += `
            <div class="mb-6">
                <h3 class="font-semibold text-lg mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h3>
                <ul class="list-disc pl-5">
        `;
        
        const additionalActivities = Array.isArray(activities['–°–≤–û–ö–í–≠–î–î–æ–ø']) 
            ? activities['–°–≤–û–ö–í–≠–î–î–æ–ø'] 
            : [activities['–°–≤–û–ö–í–≠–î–î–æ–ø']];
        
        additionalActivities.forEach(activity => {
            resultHtml += `
                <li><strong>${activity['@attributes']['–ö–æ–¥–û–ö–í–≠–î'] || '-'}:</strong> 
                    ${activity['@attributes']['–ù–∞–∏–º–û–ö–í–≠–î'] || '-'}</li>
            `;
        });
        
        resultHtml += `</ul></div>`;
    }
    
    resultHtml += `</div>`;
    
    document.getElementById('contractorResult').innerHTML = resultHtml;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞
function displayLegalEntity(data) {
    const company = data['@attributes'] || {};
    const address = data['–°–≤–ê–¥—Ä–µ—Å–Æ–õ'] || {};
    const status = data['–°–≤–ü—Ä–µ–∫—Ä–Æ–õ'] || {};
    const activities = data['–°–≤–û–ö–í–≠–î'] || {};
    const taxOffice = data['–°–≤–†–µ–≥–û—Ä–≥']?.['@attributes'] || {};
    const management = data['–°–≤–†—É–∫–û—Ä–≥'] || {};
    
    let resultHtml = `
        <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
            <h2 class="text-2xl font-bold mb-4 text-green-600 dark:text-green-400">
                –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ
            </h2>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div>
                    <h3 class="font-semibold text-lg mb-2">–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
                    <p><strong>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</strong> ${company['–ù–∞–∏–º–Æ–õ–ü–æ–ª–Ω'] || '-'}</p>
                    <p><strong>–ò–ù–ù:</strong> ${company['–ò–ù–ù'] || '-'}</p>
                    <p><strong>–û–ì–†–ù:</strong> ${company['–û–ì–†–ù'] || '-'}</p>
                    <p><strong>–ö–ü–ü:</strong> ${company['–ö–ü–ü'] || '-'}</p>
                    <p><strong>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</strong> ${formatDate(company['–î–∞—Ç–∞–û–ì–†–ù'])}</p>
                </div>
                
                <div>
                    <h3 class="font-semibold text-lg mb-2">–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
                    <p><strong>–ù–∞–ª–æ–≥–æ–≤—ã–π –æ—Ä–≥–∞–Ω:</strong> ${taxOffice['–ù–∞–∏–º–ù–û'] || '-'}</p>
                    <p><strong>–ö–æ–¥ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ—Ä–≥–∞–Ω–∞:</strong> ${taxOffice['–ö–æ–¥–ù–û'] || '-'}</p>
                </div>
            </div>
            
            <div class="mb-6">
                <h3 class="font-semibold text-lg mb-2">–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å</h3>
                <p>${address['–ê–¥—Ä–µ—Å–†–§']?.['@attributes']?.['–ù–∞–∏–º–ê–¥—Ä'] || '-'}</p>
            </div>
            
            <div class="mb-6">
                <h3 class="font-semibold text-lg mb-2">–°—Ç–∞—Ç—É—Å</h3>
                <p class="${status['@attributes'] ? 'text-red-600 dark:text-red-400' : 'text-green-600 dark:text-green-400'}">
                    ${status['@attributes']?.['–ù–∞–∏–º–ü—Ä–µ–∫—Ä'] || '–î–µ–π—Å—Ç–≤—É—é—â–µ–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ'}
                </p>
                ${status['@attributes']?.['–î–∞—Ç–∞–ü—Ä–µ–∫—Ä'] ? `<p><strong>–î–∞—Ç–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è:</strong> ${formatDate(status['@attributes']['–î–∞—Ç–∞–ü—Ä–µ–∫—Ä'])}</p>` : ''}
            </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–µ
    if (management['–ì–†–ù–î–∞—Ç–∞'] && management['–°–≤–§–õ']) {
        const manager = management['–°–≤–§–õ']['@attributes'] || {};
        resultHtml += `
            <div class="mb-6">
                <h3 class="font-semibold text-lg mb-2">–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ</h3>
                <p><strong>${manager['–ù–∞–∏–º–î–æ–ª–∂–Ω'] || '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'}:</strong> 
                   ${manager['–§–∞–º–∏–ª–∏—è'] || '-'} ${manager['–ò–º—è'] || '-'} ${manager['–û—Ç—á–µ—Å—Ç–≤–æ'] || '-'}</p>
            </div>
        `;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –û–ö–í–≠–î
    if (activities['–°–≤–û–ö–í–≠–î–û—Å–Ω']) {
        resultHtml += `
            <div class="mb-6">
                <h3 class="font-semibold text-lg mb-2">–û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h3>
                <p><strong>${activities['–°–≤–û–ö–í–≠–î–û—Å–Ω']['@attributes']['–ö–æ–¥–û–ö–í–≠–î'] || '-'}:</strong> 
                   ${activities['–°–≤–û–ö–í–≠–î–û—Å–Ω']['@attributes']['–ù–∞–∏–º–û–ö–í–≠–î'] || '-'}</p>
            </div>
        `;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (activities['–°–≤–û–ö–í–≠–î–î–æ–ø'] && activities['–°–≤–û–ö–í–≠–î–î–æ–ø'].length > 0) {
        resultHtml += `
            <div class="mb-6">
                <h3 class="font-semibold text-lg mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h3>
                <ul class="list-disc pl-5">
        `;
        
        const additionalActivities = Array.isArray(activities['–°–≤–û–ö–í–≠–î–î–æ–ø']) 
            ? activities['–°–≤–û–ö–í–≠–î–î–æ–ø'] 
            : [activities['–°–≤–û–ö–í–≠–î–î–æ–ø']];
        
        additionalActivities.forEach(activity => {
            resultHtml += `
                <li><strong>${activity['@attributes']['–ö–æ–¥–û–ö–í–≠–î'] || '-'}:</strong> 
                    ${activity['@attributes']['–ù–∞–∏–º–û–ö–í–≠–î'] || '-'}</li>
            `;
        });
        
        resultHtml += `</ul></div>`;
    }
    
    resultHtml += `</div>`;
    
    document.getElementById('contractorResult').innerHTML = resultHtml;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString) {
    if (!dateString) return '-';
    const [year, month, day] = dateString.split('-');
    return `${day}.${month}.${year}`;
}

// –£—á—ë—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
let operations = JSON.parse(localStorage.getItem('operations')) || [];
function addOperation() {
    const type = document.getElementById('operationType').value;
    const amount = parseFloat(cleanNumber(document.getElementById('operationAmount').value)) || 0;
    const date = document.getElementById('operationDate').value;
    operations.push({ type, amount, date });
    localStorage.setItem('operations', JSON.stringify(operations));
    updateChart();
    alert('–û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞');
}

// –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–ª–æ–≥–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
let chartInstance = null;
function updateChart() {
    const ctx = document.getElementById('taxChart').getContext('2d');
    const incomes = operations.filter(op => op.type === 'income').reduce((sum, op) => sum + op.amount, 0);
    const expenses = operations.filter(op => op.type === 'expense').reduce((sum, op) => sum + op.amount, 0);
    const vatResults = JSON.parse(localStorage.getItem('vatResults')) || [];
    const totalVAT = vatResults.reduce((sum, row) => sum + parseFloat(row[4] || 0), 0);

    if (chartInstance) {
        chartInstance.destroy();
    }

    chartInstance = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã', '–ù–î–°'],
            datasets: [{
                data: [incomes, expenses, totalVAT],
                backgroundColor: ['#34c759', '#ff3b30', '#007aff'],
                borderColor: ['#2a9d4a', '#d63031', '#005bb5'],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { position: 'top' },
                title: { display: true, text: '–ù–∞–ª–æ–≥–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞' }
            }
        }
    });
}

// –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ö–ë–ö
const kbkData = [
    { type: '–ï–¥–∏–Ω—ã–π –Ω–∞–ª–æ–≥–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂', kbk: '182 0 10 61201 01 0000 510' },
    { type: '–ù–∞–ª–æ–≥ –Ω–∞ —Å–≤–µ—Ä—Ö–ø—Ä–∏–±—ã–ª—å', kbk: '182 1 01 03000 01 1000 110' },
    { type: '–ù–î–§–õ 13% (–¥–æ 2.4M)', kbk: '182 1 01 02010 01 1000 110' },
    { type: '–ù–î–§–õ 15% (2.4‚Äì5M)', kbk: '182 1 01 02080 01 1000 110' },
    { type: '–ù–î–§–õ 18% (5‚Äì20M)', kbk: '182 1 01 02150 01 1000 110' },
    { type: '–ù–î–§–õ 20% (20‚Äì50M)', kbk: '182 1 01 02160 01 1000 110' },
    { type: '–ù–î–§–õ 22% (>50M)', kbk: '182 1 01 02170 01 1000 110' },
    { type: '–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤–∑–Ω–æ—Å—ã (–µ–¥–∏–Ω—ã–π —Ç–∞—Ä–∏—Ñ)', kbk: '182 1 02 01000 01 1000 160' },
    { type: '–ù–î–° (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ –†–§)', kbk: '182 1 03 01000 01 1000 110' },
];
document.getElementById('kbkSearch').addEventListener('input', () => {
    const search = document.getElementById('kbkSearch').value.toLowerCase();
    const tableBody = document.querySelector('#kbkTable tbody');
    tableBody.innerHTML = '';
    kbkData.filter(row => row.type.toLowerCase().includes(search)).forEach(row => {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td class="p-3">${row.type}</td><td class="p-3">${row.kbk}</td>`;
        tableBody.appendChild(tr);
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç –≤ 1–° (–∑–∞–≥–ª—É—à–∫–∞)
function exportTo1C() {
    alert('–≠–∫—Å–ø–æ—Ä—Ç –≤ 1–°... (–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML –¥–ª—è 1–°)');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.tab-button').forEach(button => {
        button.addEventListener('click', () => {
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active', 'border-green-500'));
            button.classList.add('active', 'border-green-500');
            document.querySelectorAll('.tab-content').forEach(content => content.classList.add('hidden'));
            document.getElementById(button.dataset.tab).classList.remove('hidden');
        });
    });

    document.getElementById('themeToggle').addEventListener('click', () => {
        document.body.classList.toggle('dark');
        localStorage.setItem('theme', document.body.classList.contains('dark') ? 'dark' : 'light');
        document.getElementById('themeToggle').textContent = document.body.classList.contains('dark') ? '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞' : '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞';
    });

    if (localStorage.getItem('theme') === 'dark') {
        document.body.classList.add('dark');
        document.getElementById('themeToggle').textContent = '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞';
    }

    updateChart();
    document.querySelector('#kbkSearch').dispatchEvent(new Event('input'));
});
